//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DeviceAPI {
    /**

     - parameter skip: (query) number of records to skip (optional)
     - parameter limit: (query) max number of records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevices(skip: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getDevicesWithRequestBuilder(skip: skip, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /devices

     - examples: [{contentType=application/json, example=[ "http://10.0.0.225:8080", "http://10.0.0.225:8080" ]}]
     - parameter skip: (query) number of records to skip (optional)
     - parameter limit: (query) max number of records to return (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func getDevicesWithRequestBuilder(skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[String]> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "skip": skip?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(body: DeviceRegistrationInfo? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /devices
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func registerWithRequestBuilder(body: DeviceRegistrationInfo? = nil) -> RequestBuilder<Void> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
